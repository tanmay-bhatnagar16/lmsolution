<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="37" passed="37">
  <reporter-output>
  </reporter-output>
  <suite name="TmpSuite" duration-ms="91001" started-at="2019-01-23T06:15:47Z" finished-at="2019-01-23T06:17:18Z">
    <groups>
    </groups>
    <test name="TmpTest" duration-ms="91001" started-at="2019-01-23T06:15:47Z" finished-at="2019-01-23T06:17:18Z">
      <class name="lm.solution.PlaceOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="9" started-at="2019-01-23T11:45:47Z" finished-at="2019-01-23T11:45:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_VerifyId()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_VerifyId()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_VerifyId" duration-ms="3103" started-at="2019-01-23T11:45:47Z" finished-at="2019-01-23T11:45:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_VerifyId -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:45:50Z" finished-at="2019-01-23T11:45:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_VerifyId status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_VerifyId()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:45:50Z" finished-at="2019-01-23T11:45:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyDistancesCount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyDistancesCount()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_verifyDistancesCount" duration-ms="1438" started-at="2019-01-23T11:45:50Z" finished-at="2019-01-23T11:45:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyDistancesCount -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:45:52Z" finished-at="2019-01-23T11:45:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyDistancesCount status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyDistancesCount()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:45:52Z" finished-at="2019-01-23T11:45:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms" duration-ms="1354" started-at="2019-01-23T11:45:52Z" finished-at="2019-01-23T11:45:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareAboveTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:45:53Z" finished-at="2019-01-23T11:45:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareAboveTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:45:53Z" finished-at="2019-01-23T11:45:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges" duration-ms="1355" started-at="2019-01-23T11:45:53Z" finished-at="2019-01-23T11:45:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:45:55Z" finished-at="2019-01-23T11:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareAboveTwoKms_NightCharges()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:45:55Z" finished-at="2019-01-23T11:45:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms" duration-ms="1270" started-at="2019-01-23T11:45:55Z" finished-at="2019-01-23T11:45:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareBelowTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:45:56Z" finished-at="2019-01-23T11:45:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareBelowTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:45:56Z" finished-at="2019-01-23T11:45:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges" duration-ms="1357" started-at="2019-01-23T11:45:56Z" finished-at="2019-01-23T11:45:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:45:57Z" finished-at="2019-01-23T11:45:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges status=SUCCESS method=PlaceOrderTests.Testcase_placeAdvanceOrder_verifyFareBelowTwoKms_NightCharges()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyCurrency()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifyCurrency" duration-ms="1352" started-at="2019-01-23T11:45:57Z" finished-at="2019-01-23T11:45:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyCurrency -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:45:57Z" finished-at="2019-01-23T11:45:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifyCurrency()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:45:59Z" finished-at="2019-01-23T11:45:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyCurrency status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyCurrency()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:45:59Z" finished-at="2019-01-23T11:45:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifyDistancesCount()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyDistancesCount()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifyDistancesCount" duration-ms="1350" started-at="2019-01-23T11:45:59Z" finished-at="2019-01-23T11:46:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyDistancesCount -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:00Z" finished-at="2019-01-23T11:46:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyDistancesCount status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyDistancesCount()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:00Z" finished-at="2019-01-23T11:46:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifyFareAboveTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifyFareAboveTwoKms" duration-ms="1302" started-at="2019-01-23T11:46:00Z" finished-at="2019-01-23T11:46:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyFareAboveTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:01Z" finished-at="2019-01-23T11:46:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyFareAboveTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyFareAboveTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:01Z" finished-at="2019-01-23T11:46:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifyFareBelowTwoKms()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifyFareBelowTwoKms" duration-ms="1342" started-at="2019-01-23T11:46:01Z" finished-at="2019-01-23T11:46:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyFareBelowTwoKms -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:46:03Z" finished-at="2019-01-23T11:46:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyFareBelowTwoKms status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyFareBelowTwoKms()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:03Z" finished-at="2019-01-23T11:46:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifyID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifyID()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifyID" duration-ms="1346" started-at="2019-01-23T11:46:03Z" finished-at="2019-01-23T11:46:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifyID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:04Z" finished-at="2019-01-23T11:46:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifyID status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifyID()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:46:04Z" finished-at="2019-01-23T11:46:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.PlaceOrderTests.Testcase_placeOrder_verifySingleStopValue()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="Testcase_placeOrder_verifySingleStopValue()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="Testcase_placeOrder_verifySingleStopValue" duration-ms="1131" started-at="2019-01-23T11:46:04Z" finished-at="2019-01-23T11:46:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Testcase_placeOrder_verifySingleStopValue -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:05Z" finished-at="2019-01-23T11:46:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Testcase_placeOrder_verifySingleStopValue status=SUCCESS method=PlaceOrderTests.Testcase_placeOrder_verifySingleStopValue()[pri:0, instance:lm.solution.PlaceOrderTests@64bf3bbf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.solution.PlaceOrderTests -->
      <class name="lm.solution.DriverCompleteOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:36Z" finished-at="2019-01-23T11:46:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyErrorMessage_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyErrorMessage_InvalidID" duration-ms="3596" started-at="2019-01-23T11:46:36Z" finished-at="2019-01-23T11:46:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyErrorMessage_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:40Z" finished-at="2019-01-23T11:46:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyErrorMessage_InvalidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:40Z" finished-at="2019-01-23T11:46:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete" duration-ms="2410" started-at="2019-01-23T11:46:40Z" finished-at="2019-01-23T11:46:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:42Z" finished-at="2019-01-23T11:46:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyOrderStatus_InvalidFlow_AssignedToComplete()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:42Z" finished-at="2019-01-23T11:46:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyOrderStatus_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyOrderStatus_ValidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyOrderStatus_ValidID" duration-ms="3616" started-at="2019-01-23T11:46:42Z" finished-at="2019-01-23T11:46:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyOrderStatus_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:46Z" finished-at="2019-01-23T11:46:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyOrderStatus_ValidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyOrderStatus_ValidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:46:46Z" finished-at="2019-01-23T11:46:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyStatusCode_InvalidFlow" duration-ms="3593" started-at="2019-01-23T11:46:46Z" finished-at="2019-01-23T11:46:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:49Z" finished-at="2019-01-23T11:46:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyStatusCode_InvalidFlow status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyStatusCode_InvalidID" duration-ms="3607" started-at="2019-01-23T11:46:49Z" finished-at="2019-01-23T11:46:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:49Z" finished-at="2019-01-23T11:46:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:46:53Z" finished-at="2019-01-23T11:46:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyStatusCode_InvalidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:53Z" finished-at="2019-01-23T11:46:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Complete_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="TestCase_Complete_Order_VerifyStatusCode_ValidID" duration-ms="3606" started-at="2019-01-23T11:46:53Z" finished-at="2019-01-23T11:46:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Complete_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:56Z" finished-at="2019-01-23T11:46:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Complete_Order_VerifyStatusCode_ValidID status=SUCCESS method=DriverCompleteOrderTests.TestCase_Complete_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.DriverCompleteOrderTests@64bfbc86] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.solution.DriverCompleteOrderTests -->
      <class name="lm.solution.CancelOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:56Z" finished-at="2019-01-23T11:46:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyErrorMessage_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyErrorMessage_InvalidID" duration-ms="2501" started-at="2019-01-23T11:46:56Z" finished-at="2019-01-23T11:46:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyErrorMessage_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:59Z" finished-at="2019-01-23T11:46:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyErrorMessage_InvalidID status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:59Z" finished-at="2019-01-23T11:46:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder" duration-ms="2379" started-at="2019-01-23T11:46:59Z" finished-at="2019-01-23T11:47:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:47:01Z" finished-at="2019-01-23T11:47:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterPlaceOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:47:01Z" finished-at="2019-01-23T11:47:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder" duration-ms="3486" started-at="2019-01-23T11:47:01Z" finished-at="2019-01-23T11:47:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:47:05Z" finished-at="2019-01-23T11:47:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyOrderstatus_ValidID_AfterTakeOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:47:05Z" finished-at="2019-01-23T11:47:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyStatusCode_InvalidID" duration-ms="2413" started-at="2019-01-23T11:47:05Z" finished-at="2019-01-23T11:47:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:47:07Z" finished-at="2019-01-23T11:47:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_InvalidID status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:47:07Z" finished-at="2019-01-23T11:47:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder" duration-ms="2484" started-at="2019-01-23T11:47:07Z" finished-at="2019-01-23T11:47:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:47:10Z" finished-at="2019-01-23T11:47:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterPlaceOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder" duration-ms="3649" started-at="2019-01-23T11:47:10Z" finished-at="2019-01-23T11:47:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:47:10Z" finished-at="2019-01-23T11:47:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:47:13Z" finished-at="2019-01-23T11:47:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder status=SUCCESS method=CancelOrderTests.TestCase_Cancel_Order_VerifyStatusCode_ValidID_AfterTakeOrder()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="beforeMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:47:13Z" finished-at="2019-01-23T11:47:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.CancelOrderTests.TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="TestCase_cancel_Order_VerifyStatusCode_InvalidFlow" duration-ms="4911" started-at="2019-01-23T11:47:13Z" finished-at="2019-01-23T11:47:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_cancel_Order_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.CancelOrderTests@192b07fd]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:47:18Z" finished-at="2019-01-23T11:47:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_cancel_Order_VerifyStatusCode_InvalidFlow status=SUCCESS method=CancelOrderTests.TestCase_cancel_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.CancelOrderTests@192b07fd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.solution.CancelOrderTests -->
      <class name="lm.solution.FetchOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:05Z" finished-at="2019-01-23T11:46:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyDrivingDistances_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyDrivingDistances_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyDrivingDistances_ValidID" duration-ms="2461" started-at="2019-01-23T11:46:05Z" finished-at="2019-01-23T11:46:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyDrivingDistances_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:08Z" finished-at="2019-01-23T11:46:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyDrivingDistances_ValidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyDrivingDistances_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyErrorMessage_InvalidID" duration-ms="2486" started-at="2019-01-23T11:46:08Z" finished-at="2019-01-23T11:46:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyErrorMessage_InvalidID -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:08Z" finished-at="2019-01-23T11:46:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyErrorMessage_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:10Z" finished-at="2019-01-23T11:46:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyErrorMessage_InvalidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:10Z" finished-at="2019-01-23T11:46:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyFareAmount_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyFareAmount_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyFareAmount_ValidID" duration-ms="2509" started-at="2019-01-23T11:46:10Z" finished-at="2019-01-23T11:46:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyFareAmount_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:13Z" finished-at="2019-01-23T11:46:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyFareAmount_ValidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyFareAmount_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="5" started-at="2019-01-23T11:46:13Z" finished-at="2019-01-23T11:46:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder" duration-ms="2466" started-at="2019-01-23T11:46:13Z" finished-at="2019-01-23T11:46:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="6" started-at="2019-01-23T11:46:15Z" finished-at="2019-01-23T11:46:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyOrderStatusForPlacedOrder()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:15Z" finished-at="2019-01-23T11:46:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyStatusCode_InvalidID" duration-ms="2420" started-at="2019-01-23T11:46:15Z" finished-at="2019-01-23T11:46:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:17Z" finished-at="2019-01-23T11:46:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyStatusCode_InvalidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:17Z" finished-at="2019-01-23T11:46:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyStatusCode_ValidID" duration-ms="2471" started-at="2019-01-23T11:46:17Z" finished-at="2019-01-23T11:46:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:20Z" finished-at="2019-01-23T11:46:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyStatusCode_ValidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:46:20Z" finished-at="2019-01-23T11:46:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.FetchOrderTests.TestCase_Fetch_Order_VerifyStopsCounts_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Fetch_Order_VerifyStopsCounts_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="TestCase_Fetch_Order_VerifyStopsCounts_ValidID" duration-ms="2493" started-at="2019-01-23T11:46:20Z" finished-at="2019-01-23T11:46:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Fetch_Order_VerifyStopsCounts_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:22Z" finished-at="2019-01-23T11:46:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Fetch_Order_VerifyStopsCounts_ValidID status=SUCCESS method=FetchOrderTests.TestCase_Fetch_Order_VerifyStopsCounts_ValidID()[pri:0, instance:lm.solution.FetchOrderTests@6e1567f1] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.solution.FetchOrderTests -->
      <class name="lm.solution.DriverTakeOrderTests">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:22Z" finished-at="2019-01-23T11:46:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverTakeOrderTests.TestCase_Take_Order_VerifyErrorMessage_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="TestCase_Take_Order_VerifyErrorMessage_InvalidID" duration-ms="2520" started-at="2019-01-23T11:46:22Z" finished-at="2019-01-23T11:46:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyErrorMessage_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="afterMethod" is-config="true" duration-ms="2" started-at="2019-01-23T11:46:25Z" finished-at="2019-01-23T11:46:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyErrorMessage_InvalidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyErrorMessage_InvalidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:25Z" finished-at="2019-01-23T11:46:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverTakeOrderTests.TestCase_Take_Order_VerifyOrderStatus_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyOrderStatus_ValidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="TestCase_Take_Order_VerifyOrderStatus_ValidID" duration-ms="2461" started-at="2019-01-23T11:46:25Z" finished-at="2019-01-23T11:46:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyOrderStatus_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:27Z" finished-at="2019-01-23T11:46:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyOrderStatus_ValidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyOrderStatus_ValidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:27Z" finished-at="2019-01-23T11:46:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="TestCase_Take_Order_VerifyStatusCode_InvalidFlow" duration-ms="3598" started-at="2019-01-23T11:46:27Z" finished-at="2019-01-23T11:46:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_InvalidFlow -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="afterMethod" is-config="true" duration-ms="0" started-at="2019-01-23T11:46:31Z" finished-at="2019-01-23T11:46:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_InvalidFlow status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidFlow()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-01-23T11:46:31Z" finished-at="2019-01-23T11:46:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="TestCase_Take_Order_VerifyStatusCode_InvalidID" duration-ms="2514" started-at="2019-01-23T11:46:31Z" finished-at="2019-01-23T11:46:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_InvalidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:34Z" finished-at="2019-01-23T11:46:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_InvalidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_InvalidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="beforeMethod" is-config="true" duration-ms="4" started-at="2019-01-23T11:46:34Z" finished-at="2019-01-23T11:46:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void lm.solution.DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_ValidID()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="TestCase_Take_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="TestCase_Take_Order_VerifyStatusCode_ValidID" duration-ms="2477" started-at="2019-01-23T11:46:34Z" finished-at="2019-01-23T11:46:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase_Take_Order_VerifyStatusCode_ValidID -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113]" name="afterMethod" is-config="true" duration-ms="3" started-at="2019-01-23T11:46:36Z" finished-at="2019-01-23T11:46:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TestCase_Take_Order_VerifyStatusCode_ValidID status=SUCCESS method=DriverTakeOrderTests.TestCase_Take_Order_VerifyStatusCode_ValidID()[pri:0, instance:lm.solution.DriverTakeOrderTests@55d56113] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- lm.solution.DriverTakeOrderTests -->
    </test> <!-- TmpTest -->
  </suite> <!-- TmpSuite -->
</testng-results>
